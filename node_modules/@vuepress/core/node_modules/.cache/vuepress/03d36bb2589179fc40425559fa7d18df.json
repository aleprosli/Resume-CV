{"remainingRequest":"C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\laragon\\www\\Vuepress\\Personal\\docs\\src\\main\\README.md?vue&type=template&id=61fc9702&","dependencies":[{"path":"C:\\laragon\\www\\Vuepress\\Personal\\docs\\src\\main\\README.md","mtime":1631093082774},{"path":"C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\laragon\\www\\Vuepress\\Personal\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}